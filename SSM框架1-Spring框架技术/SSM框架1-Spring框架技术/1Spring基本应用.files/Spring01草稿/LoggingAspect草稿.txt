package cn.cal.aop;

import java.util.Arrays;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;

public class LoggingAspect {
   
   private void myPointCut() {}
   
   public void beforeMethod(JoinPoint joinPoint) {
	   String methodName = joinPoint.getSignature().getName();
	   Object[] args = joinPoint.getArgs();
	   System.out.println("The method "+methodName+" begin with "+Arrays.asList(args));
   }
   
   public void afterMethod(JoinPoint joinPoint) {
	   String methodName = joinPoint.getSignature().getName();
	   System.out.println("The method "+methodName+" ends. ");
   }
   
   public void afterReturning(JoinPoint joinPoint, Object result) {
	   String methodName = joinPoint.getSignature().getName();
	   System.out.println("The method "+methodName+" end with "+result);   
   }
   
   public void afterThrowing(JoinPoint joinPoint,Exception e) {
	   String methodName = joinPoint.getSignature().getName();
	   System.out.println("The method "+methodName+" occurs exception "+e);        
   }
   
   public Object aroundMethod(ProceedingJoinPoint pjd) {
	   Object result = null;
	   String methodName = pjd.getSignature().getName();
	   try {
		   //前置通知
		   System.out.println("The method "+methodName+" begin with "+Arrays.asList(pjd.getArgs()));
		   result = pjd.proceed();
		   //返回通知
		   System.out.println("The method "+methodName+" end with "+result); 
	   }catch(Throwable e){	   
		   //异常通知
		   System.out.println("The method "+methodName+" occurs exception "+e);  
		   throw new RuntimeException(e);
	   }
	   //后置通知
	   System.out.println("The method "+methodName+" ends. ");
	   return result;
   }
}